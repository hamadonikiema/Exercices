{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Exercice1 \n",
    "\n",
    "num = [i for i in range(2000,3201) \n",
    "if i % 7 == 0 and i % 5!=0]\n",
    "print(num)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Exercice2\n",
    "\n",
    "def fact(n):\n",
    "    if n == 0:\n",
    "        return 1\n",
    "    else:\n",
    "        return n * fact(n - 1)\n",
    "fact(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Exercice3\n",
    "\n",
    "n = int(input(\"Entrez un chiffre svp: \"))\n",
    "ans={i : i*i for i in range(1, n + 1)}\n",
    "print(ans)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Exercice4\n",
    "\n",
    "def remove_char(str, n):\n",
    "      part_1 = str[:n] \n",
    "      part_2 = str[n+1:]\n",
    "      return part_1 + part_2\n",
    "print(remove_char('kitten', 1 ))\n",
    "print(remove_char('kitten', 0 ))\n",
    "print(remove_char('kitten',4 ))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Exercice5\n",
    "\n",
    "import numpy as np\n",
    "x= np.arange(6).reshape(3,2)\n",
    "print(\"Original array elements: \", x )\n",
    "print(\"Array to list: \",x.tolist() )\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Exercice6\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "original_array1 = [0, 1, 2] \n",
    "original_array2 = [2, 1, 0] \n",
    "cov = np.cov(original_array1,original_array2)\n",
    "cov"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Exercice7\n",
    "\n",
    "C, H = 50, 30\n",
    "mylist = input().split(',')\n",
    "print(*(round((2*C*int(D)/H)**(1/2)) for D in mylist), sep=\",\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
